1####################################################################################
Employee Names --> HackerRank
select name from employee
order by name;
2####################################################################################
Employee Salaries --> HackerRank
select name from employee
where salary > 2000 and months < 10
order by employee_id;
3####################################################################################
Type of Triangle --> HackerRank
SELECT  
    CASE
        WHEN A + B <= C or a + c <= b or b + c <= a THEN 'Not A Triangle'
        WHEN a = b and b = c THEN 'Equilateral'
        WHEN a = b OR b = c or a = c THEN 'Isosceles'
        ELSE 'Scalene'
    END 
FROM triangles;
4####################################################################################
The PADS --> HackerRank
select name + '(' + left(occupation,1) + ')' from OCCUPATIONS
order by name
select 'There are a total of ' + str(count(*))+ " "+ lower(occupation) + 's.' from OCCUPATIONS
group by occupation
order by count(*);

5####################################################################################
Occupations --> HackerRank
select
    Doctor,
    Professor,
    Singer,
    Actor
from (
    select
        NameOrder,
        max(case Occupation when 'Doctor' then Name end) as Doctor,
        max(case Occupation when 'Professor' then Name end) as Professor,
        max(case Occupation when 'Singer' then Name end) as Singer,
        max(case Occupation when 'Actor' then Name end) as Actor
    from (
            select
                Occupation,
                Name,
                row_number() over(partition by Occupation order by Name ASC) as NameOrder
            from Occupations
         ) as NameLists
    group by NameOrder
    ) as Names1
  
6####################################################################################
Binary Tree Nodes --> HackerRank
select N,
    case
    when p is null then "Root"
    when n in (select p from bst) then "Inner"
    else "Leaf"
    end
from BST
order by 1;

7####################################################################################
New Companies --> HackerRank

SELECT COMPANY_CODE, FOUNDER,
(SELECT COUNT(DISTINCT LEAD_MANAGER_CODE) FROM LEAD_MANAGER WHERE COMPANY_CODE = C.COMPANY_CODE),
(SELECT COUNT(DISTINCT SENIOR_MANAGER_CODE) FROM SENIOR_MANAGER WHERE COMPANY_CODE = C.COMPANY_CODE),
(SELECT COUNT(DISTINCT MANAGER_CODE) FROM MANAGER WHERE COMPANY_CODE = C.COMPANY_CODE),
(SELECT COUNT(DISTINCT EMPLOYEE_CODE) FROM EMPLOYEE WHERE COMPANY_CODE = C.COMPANY_CODE)
FROM COMPANY C
ORDER BY 1;

8####################################################################################
Revising Aggregations -  The Count Function --> HackerRank

select count(name)
from city
where population > 100000;

9####################################################################################
Revising Aggregations - The Sum Function --> HackerRank
1.way
SELECT DISTINCT SUM(population) OVER ()
FROM city 
WHERE district like 'California';

2.way
select sum(population)
from city
group by district
having district like 'California';

    10####################################################################################
--Revising Aggregations - Averages --> HackerRank

select avg(population)
from city
group by district
having district like 'California';    
    ####################################################################################
--Average Population --> HackerRank

select floor(avg(population))
from city;


Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
select sum(population)
from city
where COUNTRYCODE = "JPN";


Population Density Difference --> HAckerRank
select max(population)-min(population) from city;

SQLAggregationThe Blunder --> HACKERRANK
SELECT CEIL(AVG(SALARY) - AVG(REPLACE(SALARY, '0', '')))
FROM EMPLOYEES;