1###########################################################################################
# Return the number (count) of vowels in the given string.

# We will consider a, e, i, o, u as vowels for this Kata (but not y).

# The input string will only consist of lower case letters and/or spaces.


def get_count(sentence):
    
    vowels = 'aeuio'
    count= 0
    
    for i in sentence:
        if i in vowels:
            count += 1
            
    return count   
2#############################################################################################
# You are given an array (which will have a length of at least 3, but could be very large) containing integers. 
# The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. 
# Write a method that takes the array as an argument and returns this "outlier" N.


def find_outlier(integers):
    even =[]
    odd =[]
    
    for i in integers:
        if i%2==0:
            even.append(i)
        else:
            odd.append(i)
    
    if len(even)==1:
        return even.pop()
    else:
        return odd.pop()        
3############################################################################################# 
# Implement a function that adds two numbers together and returns their sum in binary. The conversion can be done before, or after the addition.
# The binary number returned should be a string.
# Examples:(Input1, Input2 --> Output (explanation)))


def add_binary(a,b):
    return bin(int(a+b))[2:]  
4############################################################################################# 
Check to see if a string has the same amount of 'x's and 'o's. 
The method must return a boolean and be case insensitive. 
The string can contain any char.

Examples input/output:
XO("ooxx") => true
XO("xooxx") => false
XO("ooxXm") => true
XO("zpzpzpp") => true // when no 'x' and 'o' is present should return true
XO("zzoo") => false


1.way
def xo(s):
    count_x = 0
    count_o = 0
    for i in s.lower():
        if i == 'x':
            count_x += 1
        elif i == 'o':
            count_o += 1
            if str(count_x) == str(count_o):
                return True
            elif str(count_x)==0 and str(count_o)==0:
                return True
            else:
                return False
                
 2.way
 def xo(s):
    x_count = 0
    o_count = 0
    for i in s.lower():
        if (i == 'x' ):
            x_count+=1
        elif (i == 'o' ):
            o_count+=1
            
    if ((x_count == o_count) or ((x_count and o_count) == 0)): 
        return True
    else:
        return False                          
5############################################################################################# 
Given the triangle of consecutive odd numbers:

def row_sum_odd_numbers(n):
    return pow(n,3)
6############################################################################################# 
Is a number prime?
Define a function that takes an integer argument and returns a logical value true or false depending on if the integer is a prime.
Per Wikipedia, a prime number ( or a prime ) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

1.way
def is_prime(num):
    if(num > 1):
        for i in range(2, int(sqrt(num)) + 1):
            if (num % i == 0):
                return False
        else:
            return True
    else:
        return False

2.way of mine, which is give me time out code......
def is_prime(num):
    if num > 0:
        counter = 0
        for i in range(1, num+1):
            if num % i == 0:
                counter += 1

        if (num == 0) or (num == 1) or (counter >= 3):
            return False

        else:

            return True
    else:
        return False
7############################################################################################# 
Let's learn about list comprehensions! You are given three integers  and  representing the dimensions of a cuboid along with an integer . 
Print a list of all possible coordinates given by  on a 3D grid where the sum of  is not equal to n .

1.way without list comprehensions
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    
    list=[]    
    for i in range(x+1):
        for j in range(y+1):
            for k in range(z+1):
                if n!= sum([i,j,k]):
                    list.append([i,j,k])
    print(list) 
    
2.way
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    print([[i,j,k]  for i in range(x+1)
              for j in range(y+1)
              for k in range(z+1) if n!= sum([i,j,k])])
              
8############################################################################################# 
Fizz Buzz
Return an array containing the numbers from 1 to N, where N is the parametered value.
Replace certain values however if any of the following conditions are met:

If the value is a multiple of 3: use the value "Fizz" instead
If the value is a multiple of 5: use the value "Buzz" instead
If the value is a multiple of 3 & 5: use the value "FizzBuzz" instead
N will never be less than 1.


def fizzbuzz(n):
    list1=[]
    for i in range(1,n+1):
        if i%3==0:
            list1.append('Fizz')
        elif i%5==0:
            list1.append('Buzz')
        elif i%3==0 and i%5==0:
            list1.append('FizzBuzz')
        else:
            list1.append(i)
    return list1

9############################################################################################# 
Nested Lists
Given the names and grades for each student in a class of N students, store them in a nested list and print the name(s) of any student(s) 
having the second lowest grade.
Note: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.

if __name__ == '__main__':
    dict1={}
    for _ in range(int(input())):
        name = input()
        score = float(input())
        dict1[name]= score

    mini= min(dict1.values())
    dict2={k:v for k,v in dict1.items() if v!=mini}

    mini= min(dict2.values())
    dict3={k:v for k,v in dict2.items() if v==mini}

    print(*sorted(dict3.keys()), sep='\n')


10############################################################################################# 
Lists
Consider a list (list = []). You can perform the following commands:

insert i e: Insert integer  at position .
print: Print the list.
remove e: Delete the first occurrence of integer .
append e: Insert integer  at the end of the list.
sort: Sort the list.
pop: Pop the last element from the list.
reverse: Reverse the list.
Initialize your list and read in the value of  followed by  lines of commands where each command will be of the  types listed above.
Iterate through each command in order and perform the corresponding operation on your list.

if __name__ == '__main__':
    N = int(input())
    
    list1=[]
    for n in range(N):
        inp=input().split()
        if inp[0]=='insert':
            list1.insert(int(inp[1]),int(inp[2]))
        elif inp[0]=='remove':
            list1.remove(int(inp[1]))
        elif inp[0]=='append':
            list1.append(int(inp[1]))
        elif inp[0]=='sort':
            list1.sort()   # default kucukten buyuge siraliyor
        elif inp[0]=='print':
            print(list1) 
        elif inp[0]=='pop': #default -1, sondan cikartiyor
            list1.pop()
        elif inp[0]=='reverse':   
            list1.reverse()
