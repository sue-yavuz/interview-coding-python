1###########################################################################################

# Return the number (count) of vowels in the given string.

# We will consider a, e, i, o, u as vowels for this Kata (but not y).

# The input string will only consist of lower case letters and/or spaces.


def get_count(sentence):
    
    vowels = 'aeuio'
    count= 0
    
    for i in sentence:
        if i in vowels:
            count += 1
            
    return count
    
    
2#############################################################################################
# You are given an array (which will have a length of at least 3, but could be very large) containing integers. 
# The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. 
# Write a method that takes the array as an argument and returns this "outlier" N.


def find_outlier(integers):
    even =[]
    odd =[]
    
    for i in integers:
        if i%2==0:
            even.append(i)
        else:
            odd.append(i)
    
    if len(even)==1:
        return even.pop()
    else:
        return odd.pop()
        
        
3############################################################################################# 
# Implement a function that adds two numbers together and returns their sum in binary. The conversion can be done before, or after the addition.
# The binary number returned should be a string.
# Examples:(Input1, Input2 --> Output (explanation)))


def add_binary(a,b):
    return bin(int(a+b))[2:]
    
    
4############################################################################################# 
Check to see if a string has the same amount of 'x's and 'o's. 
The method must return a boolean and be case insensitive. 
The string can contain any char.

Examples input/output:
XO("ooxx") => true
XO("xooxx") => false
XO("ooxXm") => true
XO("zpzpzpp") => true // when no 'x' and 'o' is present should return true
XO("zzoo") => false


1.way
def xo(s):
    count_x = 0
    count_o = 0
    for i in s.lower():
        if i == 'x':
            count_x += 1
        elif i == 'o':
            count_o += 1
            if str(count_x) == str(count_o):
                return True
            elif str(count_x)==0 and str(count_o)==0:
                return True
            else:
                return False
                
 2.way
 def xo(s):
    x_count = 0
    o_count = 0
    for i in s.lower():
        if (i == 'x' ):
            x_count+=1
        elif (i == 'o' ):
            o_count+=1
            
    if ((x_count == o_count) or ((x_count and o_count) == 0)): 
        return True
    else:
        return False
                           
5############################################################################################# 

Given the triangle of consecutive odd numbers:


def row_sum_odd_numbers(n):
    return pow(n,3)


6############################################################################################# 
Is a number prime?
Define a function that takes an integer argument and returns a logical value true or false depending on if the integer is a prime.
Per Wikipedia, a prime number ( or a prime ) is a natural number greater than 1 that has no positive divisors other than 1 and itself.


def is_prime(num):
    if num > 0:
        counter = 0
        for i in range(1, num+1):
            if num % i == 0:
                counter += 1

        if (num == 0) or (num == 1) or (counter >= 3):
            return False

        else:

            return True
    else:
        return False


