1###########################################################################
Find a string --> HackerRank
def count_substring(string, sub_string):
    count1 = 0
    for i in range(len(string)):
        if string[i:].startswith(sub_string):
            count1 += 1
    return count1


if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)
2###########################################################################
String Validators --> HackerRank

if __name__ == '__main__':
    s = input()
    print(any(i.isalnum() for i in s))
    print(any(i.isalpha() for i in s))
    print(any(i.isdigit() for i in s))
    print(any(i.islower() for i in s))
    print(any(i.isupper() for i in s))
3#################################################################################
Find the unique number -->CodeWars
def find_uniq(arr):
    # your code here
    for i in set(arr):
        if arr.count(i)==1:
            return i
4#######################################################################
Two Sum--> LettCode
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in nums:
            for j in nums[1::]:
                if i+j==target:
                    x = nums.index(i)
                    y = nums.index(j,x+1)
                    return [x,y]
                    
5######################################################################
Human Readable Time -->CodeWars
1.way
def make_readable(seconds):
    h = seconds // 3600
    m = (seconds - h * 3600) // 60
    s = seconds - (h * 3600) - (m * 60)
    return f"{h:0>2d}:{m:0>2d}:{s:0>2d}"
2.way
def make_readable(seconds):
    return '{:02}:{:02}:{:02}'.format(seconds // 3600, seconds // 60 % 60, seconds % 60)
