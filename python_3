1###########################################################################
Find a string --> HackerRank
def count_substring(string, sub_string):
    count1 = 0
    for i in range(len(string)):
        if string[i:].startswith(sub_string):
            count1 += 1
    return count1


if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)
2###########################################################################
String Validators --> HackerRank

if __name__ == '__main__':
    s = input()
    print(any(i.isalnum() for i in s))
    print(any(i.isalpha() for i in s))
    print(any(i.isdigit() for i in s))
    print(any(i.islower() for i in s))
    print(any(i.isupper() for i in s))
3#################################################################################
Find the unique number -->CodeWars
def find_uniq(arr):
    # your code here
    for i in set(arr):
        if arr.count(i)==1:
            return i
4#######################################################################
Two Sum--> LettCode
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in nums:
            for j in nums[1::]:
                if i+j==target:
                    x = nums.index(i)
                    y = nums.index(j,x+1)
                    return [x,y]
                    
5######################################################################
Human Readable Time -->CodeWars
1.way
def make_readable(seconds):
    h = seconds // 3600
    m = (seconds - h * 3600) // 60
    s = seconds - (h * 3600) - (m * 60)
    return f"{h:0>2d}:{m:0>2d}:{s:0>2d}"
2.way
def make_readable(seconds):
    return '{:02}:{:02}:{:02}'.format(seconds // 3600, seconds // 60 % 60, seconds % 60)
    
6######################################################################    
Most frequently used words in a text --> CodeWars
def top_3_words(text):
    import string, re 
    punc = string.punctuation.replace("'", "")
    
    text = text.lower()
    text = re.sub(f'[{punc}]', ' ', text)
    words = text.split()
    
    if all(i.replace("'", "")=='' for i in words ):
        return []
    
    d = {}
    for i in words:
        d[i]  = words.count(i)

    d = dict(sorted(d.items(), key=lambda x: x[1], reverse=True))
    
    return list(d.keys())[:3]
    
######################################################################     
14. Longest Common Prefix --> Leetcode    
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        prefix = ""
        first = strs[0]

        if len(strs)==1:
            return strs[0]
     
        if not first.isalpha():
            return prefix     


        for i in range(len(first)+1):
            check = first[:i]
            for cur in strs[1:]:

                if cur.startswith(check):

                    continue
                else:
                    return prefix
                    
            prefix = check

        return prefix
######################################################################            
 itertools.product()  ------>Hackerrank     
        
# Enter your code here. Read input from STDIN. Print output to STDOUT
from itertools import product

A = list(map(int, input().split()))
B = list(map(int, input().split()))

print(*product(A, B))
# print(*((x,y) for x in A for y in B))      



######################################################################
itertools.permutations() -------->Hackerrank

1.way
# Enter your code here. Read input from STDIN. Print output to STDOUT
from itertools import permutations

inp = input().split()
msg = inp[0]
num = int(inp[1])

# print(msg, num)

result = list(permutations(msg, num))
result = sorted(map(''.join, result))

print(*result, sep='\n')

2.way
# Enter your code here. Read input from STDIN. Print output to STDOUT
from itertools import permutations
a = input().split()
msg = a[0]
num = int(a[1])

result = list(permutations(msg,num))
list1=[]
for i in result:
    list1.append("".join(i))
    
for i in sorted(list1):   
    print(i)
